#! /usr/bin/env python

import sys
import os
from shutil import rmtree
from time import localtime, sleep
from subprocess import check_output
import argparse

def dict_replace(s, d):
    for key in d:
        s = s.replace(key, d[key])
    return s

def extract(s,left='(',right=')'):
    return s.partition(left)[2].partition(right)[0].strip(' ')

parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.description = 'A script to generate Qt Creator configuration file for CMake projects.'
parser.add_argument('-c', metavar='cmakelist_dir', help='Folder of CMakeLists.txt file',default='.')
parser.add_argument('-b', metavar='build_dir', help='Relative build folder',default='./build')
parser.add_argument('--clean', action='store_true', default=False)
parser.add_argument('--yes', action='store_true', default=False)
parser.add_argument('-r', action='store_true', default=False, help="Runs this script recursively from this folder")
args = parser.parse_args()

if args.r:
    
    ignore = ['build','install','devel']
    
    def do_dir(d):
        
        if 'CMakeLists.txt' in os.listdir(d) and 'CMakeLists.txt.user' in os.listdir(d):
            print('Calling gen_qtcreator in ' + d)
            cmd = 'rosrun ecn_common gen_qtcreator --yes -c ' + d
            try:
                check_output(cmd.split())
            except:
                pass
            return  
        
        for li in os.listdir(d):
            d_new = d + '/' + li
            if os.path.isdir(d_new) and li not in ignore and li[0] != '.':
                do_dir(d_new)    
                
    do_dir('.')
    sys.exit(0)

if args.clean:
    args.yes = True

home = os.path.expanduser('~') + '/'
envID_file = home + '.config/QtProject/QtCreator.ini'
confID_file = home + '.config/QtProject/qtcreator/profiles.xml'
cmake_dir = os.path.abspath(args.c)
cmake_file = cmake_dir + '/CMakeLists.txt'
cmake_user = cmake_file + '.user'
build_dir = os.path.abspath(cmake_dir + '/' + args.b)

if not os.path.exists(envID_file) or not os.path.exists(confID_file):
    print('Will run QtCreator once to generate local configuration')
    sleep(3)
    os.system('qtcreator&')
    out = ''
    while 'qtcreator' not in out:
        out = check_output(['ps','-A'])
        sleep(1)
    sleep(5)
    os.system('killall qtcreator')
    #print('Please run QtCreator at least once before automatic configuration')
    #sys.exit(0)
    
# get ID's on this computer and Qt Creator version
with open(envID_file) as f:
    envID = f.read().split('Settings\EnvironmentId=@ByteArray(')[1].split(')')[0]
with open(confID_file) as f:
    data = f.read()
    confID = data.split('<value type="QString" key="PE.Profile.Id">')[1].split('<')[0]
    qtcVersion = data.split('<!-- Written by QtCreator ')[1].split(', ')[0]

if not os.path.exists(cmake_file):
    print('Could not find CMakeLists.txt, exiting')
    print('Given location: ', cmake_file)
    sys.exit(0)

if os.path.exists(cmake_user) and not args.yes:
    ans = 'not good'
    while ans not in ('y','n',''):
        ans = raw_input('CMakeLists.txt.user already exists, should I delete it [Y/n]: ').lower()
    if ans == 'n':
        print('CMakeLists.txt.user already exists, exiting')
        sys.exit(0)
        
cmake = file(cmake_file).read().splitlines()
package = ''
targets = []
build_type = 'Debug'
ros_package = False

print('Loading ' + os.path.abspath(cmake_file))

has_lib = False
for line in cmake:
    if 'project(' in line:
        package = extract(line)
    elif 'add_library(' in line:
        start = line.find('add_library')
        if '#' not in line[:start]:
            has_lib = True
    elif 'add_executable(' in line:
        start = line.find('add_executable')
        if '#' not in line[:start]:
            target = extract(line,'(',' ')
            if '$' not in target:
                targets.append(target)
    elif 'CMAKE_BUILD_TYPE' in line:
        build_type = extract(line)
    elif 'catkin_package' in line:
        ros_package = True
        
if len(targets) == 0 and not has_lib:
    print('  no C++ targets for ' + package)
    sys.exit(0)
        
# check build directory - update if ROS unless manually set
bin_dir = build_dir
if ros_package and not '-b' in sys.argv:
    ros_dir = os.path.abspath(cmake_dir + '/..')
    while 'src' not in os.listdir(ros_dir):
        ros_dir = os.path.abspath(ros_dir + '/..')
        if ros_dir in ('/', '//'):
            print('This ROS package does not seem to be in any workspace, exiting')
            sys.exit(0)      
    build_dir = ros_dir + '/build/' + package
    bin_dir = ros_dir + '/devel/.private/' + package + '/lib'
    if not os.path.exists(build_dir):
        print('You will have to run "catkin build" before loading the project in Qt Creator')
elif not os.path.exists(build_dir):
    os.mkdir(build_dir)
elif args.clean:
    rmtree(build_dir)
    os.mkdir(build_dir)
    
print('  build directory: ' + os.path.abspath(build_dir))
print('  bin directory:   ' + os.path.abspath(bin_dir))

# load configuration template
ecn_common_path = os.path.dirname(os.path.abspath(__file__))

template_name = 'CMakeLists.txt.user.template.pre4.8'
if qtcVersion.startswith('4.8'):
    template_name = 'CMakeLists.txt.user.template.4.8'
elif qtcVersion.startswith('4.9'):
    template_name = 'CMakeLists.txt.user.template.4.9'
elif qtcVersion.startswith('4.10'):
    template_name = 'CMakeLists.txt.user.template'
    
template_file = ecn_common_path + '/' + template_name

if not os.path.exists(template_file) and 'lib/ecn_common' in ecn_common_path:
    config = file(ecn_common_path.replace('lib/ecn_common', 'share/ecn_common') + '/' + template_name).read()
else:
    config = file(template_file).read()

# header = version / time / envID
ct = localtime()
ct_str = []
for key in ('year', 'mon', 'mday','hour','min','sec'):
    ct_str.append(str(getattr(ct, 'tm_'+key)).zfill(2))
time_str = '{}-{}-{}T{}:{}:{}'.format(*ct_str)

replace_dict = {}
replace_dict['<gen_version/>'] =  qtcVersion
replace_dict['<gen_time/>'] =  '{}-{}-{}T{}:{}:{}'.format(*ct_str)
replace_dict['<gen_envID/>'] = envID
replace_dict['<gen_cmake_dir/>'] = cmake_dir
replace_dict['<gen_cmake_build_type/>'] = build_type
replace_dict['<gen_build_dir/>'] = build_dir
replace_dict['<gen_conf/>'] = confID
replace_dict['<gen_target_count/>'] = str(len(targets))
config = dict_replace(config, replace_dict)

# target blocks
start = config.find('<!-- gen_target_begin -->')
start += config[start:].find('\n') + 1
end  = config.find('<!-- gen_target_end -->')-1

target_block = [config[start:end] for target in targets]

for i,target in enumerate(targets):
    replace_dict = {}
    replace_dict['<gen_target_nb/>'] = str(i)
    replace_dict['<gen_target_exec/>'] = target
    replace_dict['<gen_bin_dir/>'] = bin_dir
    target_block[i] = dict_replace(target_block[i], replace_dict)
    print('  found target:    ' + target)

config = config.replace(config[start:end], '\n'.join(target_block))

with open(cmake_user, 'w') as f:
    f.write(config)

