#! /usr/bin/env python

import rospy
from ecn_common.msg import TokenCurrent, TokenRequest

debug = False

class TokenManager:
    def __init__(self):  
        # init publisher
        self.current = TokenCurrent()
        self.current.left = ''
        self.current.right = ''
        self.arm = 'both arm'
        self.pub = rospy.Publisher('/token_manager/current', TokenCurrent, queue_size=1)
        
        self.sub = rospy.Subscriber('token_manager/request', TokenRequest, self.requestCB)
        self.left = {}
        self.right = {}
                
    def update(self, group, d, t, current):
        
        # remove groups that have not checked for a while
        keys = d.keys()
        for key in keys:
            if t - d[key][1] > 2:
                d.pop(key)
                
        # update this group
        if group in d:
            d[group][1] = t
        else:
            d[group] = [t,t]
            
        # check time of current owner
        if current in d:
            return d[current][1]
        return 0
        
    def requestCB(self, req):
        
        msg = req.group + ' asking for '
        
        # get time
        t = rospy.Time.now().to_sec()
        
        # update requests and get latest request from current
        if req.arm == 0:
            msg += 'both arms -> '
            t0 = self.update(req.group, self.left, t, self.current.left)
            t0 = max(t0, self.update(req.group, self.right, t, self.current.right))
        elif req.arm == 1:
            t0 = self.update(req.group, self.left, t, self.current.left)
            msg += 'left arm -> '
        else:
            t0 = self.update(req.group, self.right, t, self.current.right)
            msg += 'right arm -> '

        ok = ('', req.group)
            
        # check automatic token (void or already has it)
        if req.arm == 0 and self.current.left in ok and self.current.right in ok:
            self.current.left = req.group
            self.current.right = req.group
            msg += 'ok\n'
        elif req.arm == 1 and self.current.left in ok:
            self.current.left = req.group
            msg += 'ok\n'
        elif req.arm == 2 and self.current.right in ok:
            self.current.right = req.group
            msg += 'ok\n'
        elif t0 == 0:
            # current owner has not updated for 2 sec -> pass to oldest request            
            if req.arm == 0:
                self.current.left = min(self.left, key=lambda x: self.left[x][0])
                self.current.right = min(self.right, key=lambda x: self.right[x][0])
                if self.current.left == req.group and self.current.right == req.group:
                    msg += 'ok\n'
                else:
                    msg += 'passed to ' + self.current.left + '\n'
            elif req.arm == 1:
                self.current.left = min(self.left, key=lambda x: self.left[x][0])
                if self.current.left == req.group:
                    msg += 'ok\n'
                else:
                    msg += 'passed to ' + self.current.left + '\n'
            elif req.arm == 2:
                self.current.right = min(self.right, key=lambda x: self.right[x][0])
                if self.current.right == req.group:
                    msg += 'ok\n'
                else:
                    msg += 'passed to ' + self.current.right + '\n' 
        else:
            msg += 'already used'

        if debug or (not debug and 'used' not in msg):
            print(msg)
        # publish current tokens
        self.pub.publish(self.current)

            
if __name__ == '__main__':
    '''
    Begin of main code
    '''                    
    rospy.init_node('token_manager')
    
    
    tm = TokenManager()
        
    rospy.spin()
    
